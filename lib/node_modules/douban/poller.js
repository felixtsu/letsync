var holder = {
    apiKey : '01b318f1764c503505194ad462e4f09f'

};
(function() {
    var db = require('db');
    holder.poller = function() {
        var userRegExp = /douban:([^:]*):id/;
        db.getClient().keys('douban:*:id', function(err, key) {
            var user = userRegExp.exec(key)[1];
            db.get(key, function(/*"{doubanId:'', lastPoll:Date}"*/pollingInfo) {
                var piObj = JSON.parse(pollingInfo);
                var doubanId = piObj['doubanId'];
                var lastPoll = piObj['lastPoll'];
                if (lastPoll) {
                    holder.poll(user, doubanId, lastPoll);
                } else {
                    holder.poll(user, doubanId);
                }
            });
        });
    };

    holder.startJob = function() {
        var cron = require('cron');
        db.get('sys:douban:poller:cron', function(dbReply) {
            if (!dbReply) {
                console.log('WARN: \'sys:douban:poller:cron\' not found, poller is not started.')
            }

            new cron.CronJob(dbReply, holder.poller);
        }, function(err) {
            throw new Error('error starting douban-poller:' + err);
        });
    }

})();


(function() {
    var db = require('db');
    const PATH_PROTO = '/people/#{username}/collection?apikey=01b318f1764c503505194ad462e4f09f&alt=json&max-results=10';

    var PollingInfo = function(doubanId, lastPoll) {
        this.doubanId = doubanId;
        this.lastPoll = lastPoll;
    };

    var buildOption = function(username, lastPoll) {
        path = typeof lastPoll == 'undefined' ? PATH_PROTO : PATH_PROTO + "&updated-min=" + lastPoll;
        path = path.replace('#{username}', username);
        return {
            host : 'api.douban.com',
            port : 80,
            path : path
        }
    };

    var fill2Zero = function(s) {
        if (s.toString().length == 1) {
            return '0' + s.toString();
        }
        return s;
    };


    var formatDate = function(date) {
        var offset = date.getTimezoneOffset() * 60000 + 8 * 3600000;
        date = new Date(date.getTime() + offset);

        return [date.getUTCFullYear(), fill2Zero(date.getUTCMonth() + 1), fill2Zero(date.getUTCDate())].join('-')
                + 'T'
                + [fill2Zero(date.getUTCHours()), fill2Zero(date.getUTCMinutes()), fill2Zero(date.getUTCSeconds())].join(':')
                + '\+08:00';
    };

    var createEntryHandler = function(user) {
        // todo felix ugly code: switch to pub-sub
        var renrenStatus = require('renren');
        var collectionParser = require('./collection');
        return function(entry, successCallback) {
            var status = collectionParser.handleEntry(entry);
            renrenStatus.updateStatus(user, status, successCallback);
        }
    };

    var util = require('util');

    holder.poll = function(user, doubanId, lastPoll) {
        var options = buildOption(doubanId, lastPoll);

        var entryHandler = createEntryHandler(user);
        require('http').get(options, function(res) {
            res.setEncoding('utf8');
            var resData = '';
            res.on('data', function(chunk) {
                resData += chunk;
            });
            res.on('end', function() {

                var doubanResult = JSON.parse(resData);
                util.log('[douban] polling ' + user + ', doubanId:' + doubanId + ' since ' + lastPoll + ', incoming ' + doubanResult.entry.length);

                doubanResult.entry.forEach(
                        function(entry) {
                            var updatedTime = entry.updated.$t;
                            if (updatedTime > lastPoll) {
                                entryHandler(entry, function() {
                                    db.set('douban:' + user + ':id', JSON.stringify(new PollingInfo(
                                            doubanId, updatedTime
                                    )));
                                });
                            }
                        }
                );
            });
            res.on('error', function(error) {
                console.log(error);
            });
        });
    }


})();

module.exports.startJob = holder.startJob;